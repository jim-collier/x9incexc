Notes

	Tooling
		https://www.alexedwards.net/blog/an-overview-of-go-tooling

	go build:
		Flags:
			CGO_ENABLED=0  ...............: For simple builds
			CGO_ENABLED=1  ...............: If external stuff needs to be built, e.g. sqlite3
		Options:
			-a  ..........................: Force rebuild
			--ldflags '-s -w'  ...........: Strip debugging symbols
			--tags osusergo,netgo  .......: Use built-in net and user package rather than more powerful system C versions
			Static linking: --ldflags="-extldflags=-static"  *or*  --ldflags '-extldflags "-static"'

Libraries

	Argument parsers
		alexflint/go-arg
			https://github.com/alexflint/go-arg
			go get github.com/alexflint/go-arg
			import "github.com/alexflint/go-arg"
			Notes:
				- Looks good and simple
				- Actively maintained
		jessevdk/go-flags
			https://github.com/jessevdk/go-flags
			go get github.com/jessevdk/go-flags
			import "github.com/jessevdk/go-flags"
			Notes:
				- Like go's flags, but more advanced.
				- Looks perfect?
				- May be abandoned (try it)?
			Docs & examples:
				https://godoc.org/github.com/jessevdk/go-flags
		spf13/cobra
			https://github.com/spf13/cobra
			go get -u github.com/spf13/cobra
			import "github.com/spf13/cobra"
			Notes:
				- Very powerful & used by many major applications
				- Requires a highly specific application structure. Each command gets it's own .go file under app/cmd.
				- Probably too complex.
			Docs & examples:
				https://github.com/openfaas/faas-cli/blob/master/commands/list.go
		docopt/docopt.go
			https://github.com/docopt/docopt.go
			go get github.com/docopt/docopt-go
			import "github.com/docopt/docopt-go"
			Notes:
				- Looks really simple!
				- "docopt parses command-line arguments based on a help message. Don't write parser code: a good help message already has all the necessary information in it."
				- Not maintained, me be too old for go modules?
			Docs & examples:
				https://github.com/docopt/docopt#help-message-format
		teris-io/cli
			https://github.com/teris-io/cli
			Notes:
				- Barely documented
		akamensky/argparse
			https://github.com/akamensky/argparse
			Notes:
				- "...bring ease of use and flexibility of [Python's] argparse to Go."
				- "it is messy right now and could use a major revamp"
		clagraff/argparse
			https://github.com/clagraff/argparse
			Notes:
				- No Longer Supported
				- "taking heavy influance from Python's argparse module."

	Sqlite3
		mattn/go-sqlite3
			https://github.com/mattn/go-sqlite3
			go get github.com/mattn/go-sqlite3
			import (
				"database/sql"
				_ "github.com/mattn/go-sqlite3"
			)
			Notes:
				- It's a cgo package (requiring gcc and CGO_ENABLED=1)
				- Uses standard Go database/sql syntax.
				- Instead of ":memory:", which is racey, use "file::memory:?cache=shared". https://github.com/mattn/go-sqlite3
				Sqlite3:
					> Go flags
						CGO_ENABLED=1 go build -ldflags="-extldflags=-static" --tags sqlite_omit_load_extension
						--tags "libsqlite3" ..........: DON'T USE; Include SYSTEM-installed sqlite3 library (rather than custom one from go-sqlite3)
				Compiler flags if compiling sqlite3 from scratch (not really relevant to go-sqlite3):
					## Sqlite3 compile-time flags; not useful here, just for FYI
					local sqlite3CompileFlags=""
					sqlite3CompileFlags="${sqlite3CompileFlags} -DSQLITE_OMIT_LOAD_EXTENSION"  #................: Solves a Go problem related to static linking.
					sqlite3CompileFlags="${sqlite3CompileFlags} -DSQLITE_DEFAULT_FOREIGN_KEYS=1"  #.............: 1=Enable foreign key constraints by defualt. (0 is default only for backward compatibility.)
					sqlite3CompileFlags="${sqlite3CompileFlags} -DSQLITE_THREADSAFE=0"  #.......................: 0=single-threaded, 1=fully multithreaded, 2=multithreaded but only one db connection at a time. Default=1, Sqlite3 recommended=0.
					sqlite3CompileFlags="${sqlite3CompileFlags} -DSQLITE_DEFAULT_WAL_SYNCHRONOUS=1"  #..........: Sqlite3 recommended (faster than default and safe).
					sqlite3CompileFlags="${sqlite3CompileFlags} -DSQLITE_DEFAULT_LOCKING_MODE=1"  #.............: 1=Exclusive lock. Usually no reason not to, for 1db per 1app.
					sqlite3CompileFlags="${sqlite3CompileFlags} -DSQLITE_DQS=0"  #..............................: Sqlite3 recommended. Disables the double-quoted string literal misfeature, originally intended to be compatible with older MySql databases.
					sqlite3CompileFlags="${sqlite3CompileFlags} -DSQLITE_DEFAULT_MEMSTATUS=0"  #................: Sqlite3 recommended. causes the sqlite3_status() to be disabled. Speeds everything up.
					sqlite3CompileFlags="${sqlite3CompileFlags} -DSQLITE_LIKE_DOESNT_MATCH_BLOBS"  #............: Sqlite3 recommended. Speeds up LIKE and GLOB operators.
					sqlite3CompileFlags="${sqlite3CompileFlags} -DSQLITE_MAX_EXPR_DEPTH=0"  #...................: Sqlite3 recommended. Simplifies the code resulting in faster execution, and helps the parse tree to use less memory.
					sqlite3CompileFlags="${sqlite3CompileFlags} -DSQLITE_OMIT_DEPRECATED"  #....................: Sqlite3 recommended.
					sqlite3CompileFlags="${sqlite3CompileFlags} -DSQLITE_OMIT_PROGRESS_CALLBACK"  #.............: Sqlite3 recommended.
					sqlite3CompileFlags="${sqlite3CompileFlags} -DSQLITE_OMIT_SHARED_CACHE"  #..................: Sqlite3 recommended. Speeds up.
					sqlite3CompileFlags="${sqlite3CompileFlags} -DSQLITE_USE_ALLOCA"  #.........................: Sqlite3 recommended. Make use of alloca() if exists.
					sqlite3CompileFlags="$(fStrNormalize_byecho "${sqlite3CompileFlags}")"  #...................: Normalize string
			Docs, examples, troubleshooting:
				http://go-database-sql.org/accessing.html
				https://github.com/golang/go/wiki/SQLInterface
				https://www.bogotobogo.com/GoLang/GoLang_SQLite.php
				https://github.com/mattn/go-sqlite3/issues/858#issuecomment-701531930
				https://golang.org/cmd/link/
				https://github.com/mattn/go-sqlite3
				https://groups.google.com/g/golang-nuts/c/GU6JGc3MzGs/m/f1OHpiQWH5IJ
				https://golang.org/cmd/cgo/
				https://www.ardanlabs.com/blog/2013/08/using-c-dynamic-libraries-in-go-programs.html
				https://renenyffenegger.ch/notes/development/languages/C-C-plus-plus/GCC/create-libraries/index
				https://akrennmair.github.io/golang-cgo-slides/#1
				https://github.com/mattn/go-sqlite3/issues/858
				https://www.sqlite.org/compile.html#default_wal_synchronous

GUIs
	Gio
		https://gioui.org/

Static linking
	Notes:
		- Supposedly it is as simple as renaming C language *.o object files, to *.syso and including them somewhere in the build path.
			- The files should be named with an architecture suffix, but NOT an OS suffix. (E.g. "sqlite3_v3310100_x86-64.syso".)
	References
		https://7thzero.com/blog/golang-w-sqlite3-docker-scratch-image
		https://stackoverflow.com/a/27280031
		https://github.com/golang/go/wiki/GcToolchainTricks
		https://github.com/shadowmint/go-static-linking

Design notes from Rsyncy [20190702]:

	```
	##    Notes:
	##        - All paths are forward-slash, even for Windows.
	##        - Nesting indicates scope (like, say, Python).
	##            - Nested settings and commands revert to previous once scope disappears.
	##        - Whitespace outside of quotes is generally ignored, except for beginning   indentation (like, say, Python).
	##            - Blank lines are only commented out here because my .md editor complains   bout them within code blocks.
	##        - Command names and settings are flexible. E.g.:
	##            - "include" and "incl" are equivalent.
	##            - Boolean settings: y|yes|t|true|1 are all equal. (Similarly with values   or "false".)
	##            - To turn a setting off: "" [empty], null, off, false, no, n, 0.
	##            - Setting values can be in quotes or not (unless a space is needed, then   rap value in quotes).
	##            - File size definitions:
	##                - Minimum size and name is the Byte, e.g.: 100 [bytes], 2b [Bytes], 10B,  20gb, 1Tib, etc.
	##                - "MB"  = 1000 Bytes (10^3)
	##                - "MiB" = 1024 Bytes (2^10)
	##        - Since parameter substitution isn't done, all regex grouping is converted to   on-capturing, for speed [i.e. "(?:...)"].
	##            - To preserve explicit "(" and ")" for regex matching, escape with "\".
	##        - Don't worry about doubling up on path separators, multiples will be cleaned   p.
	##        - Macros:
	##            - Once defined, use via case-insensitive format $MacroName
	##                - To use "$" in a regex, you have to escape it, like "\$"
	##    History:
	##        - 20190703: Created.

	## Macros (any other files included with --rules-from-file after this, inherits [and   an override or clear] these
	macro ANYTHING                 = ".*"
	macro DOT                      = "\."
	macro FILEORFOLDER             = "[^\/]+"
	macro FILE                     = "$FILEORFOLDER"
	macro FOLDER                   = "$FILEORFOLDER"
	macro DELIMITER                = "[^a-z0-9\/]"
	macro DELIMITERorSLASH         = "$DELIMITER|\/"
	macro WORDBOUNDARY             = "(^|$|\/|[^a-z0-9]+)"
	macro EolOrShashAndBelow       = "(\$|\/.*)"
	macro üôÉ                        = "$EolOrShashAndBelow"
	macro FSROOT                   = "(/|[A-Z]:/)"
	macro üìÅ                        = $FILEORFOLDER
	macro üìú                        = $FILEORFOLDER
	macro ‚Ä¢                        = $DOT
	macro ‚àô                        = $DOT"
	macro ‚ôæÔ∏è                        = $ANYTHING
	macro üåü                        = $ANYTHING
	macro ‚ïë                        = $WORDBOUNDARY
	macro ‚ñ∂                        = ^
	macro ‚óÄ                        = $
	macro VFSROOT                  = "($FSROOT|($üåü/mnt/($üìÅ|(usb|firewire|di?sk|dri?ve?|part[a-z0-9]*|[a-z]+fs)/$üìÅ)))"
	macro ALLUSERSHOME             = "$FSROOT/(home|Users|Documents and Settings)"
	macro VALLUSERSHOME            = "$VFSROOT/(home|Users|Documents and Settings)"
	macro USERHOME                 = "$ALLUSERSHOME/üìÅ
	macro VUSERHOME                = "$VALLUSERSHOME$DELIMITERorSLASH$üìÅ
	macro DONTBACKUP               = "$WORDBOUNDARY(don('?)t|do$DELIMITER?not|defer|delay)$DELIMITER*backup(s?)$WORDBOUNDARY"
	macro DEFERBACKUP              = "$WORDBOUNDARY(defer|delay)$DELIMITER*backup(s?)$WORDBOUNDARY"
	macro FileTypes_Doc            = "üåü‚Ä¢(odf|(doc|xls|mdb|ppt|txt)(x?))‚óÄ"
	macro FileTypes_img_camera     = "üåü/DCIM/üåü|üåü‚Ä¢(dng|raw|nef|arw|cr2)‚óÄ"
	macro FileTypes_img_edit       = "üåü‚Ä¢(psd|psb)‚óÄ"
	macro FileTypes_img            = "üåü‚Ä¢(jp(e)?g|tif(f)?|png|bmp)‚óÄ"
	macro FileTypes_archive        = "üåü‚Ä¢(zip|rar|7z(ip)?|gz(ip)?)‚óÄ"
	macro FileTYpes_video_camera   = ""
	macro FileTypes_Code           = "(üåü‚ïëbash‚ïëüåü)|(üåü‚Ä¢(sh|js|cmd|bat|c|cpp|cs|vbs)‚óÄ)"
	macro special_Git              = ""

	## Path-independent settings (can be overridden)
	case-sensitive=no
	symlinks=copy  ## follow|ignore|copy|recreate

	## Default include/excludes
	incl="üåü"
	excl="üåü/(tmp|temp|lost+found)üôÉ"
	excl="üåü/((‚Ä¢?Trash(-[0-9]+)?)|‚Ä¢Trashes|((\$)?recycle(r|ed)?(‚Ä¢bin)?))üôÉ"
	excl="üåü/‚Ä¢_üåü"
	excl="üåü/‚Ä¢_DS_Store"
	excl="üåü/‚Ä¢Spotlight-V[0-9]+üôÉ"
	excl="$VFSROOT/((pagefile|swapfile)(‚Ä¢sys)?\$|$VFSROOT/private/var/vmüôÉ)"
	excl="$VFSROOT/(dev|proc)üôÉ" #............................................... Special filesystem folders that will cause problems.
	excl="$VFSROOT/(var)üôÉ" #.................................................... Folders you probably wouldn't want to backup.

	## Order of file copying (might want to do newer & smaller files first).
	order-by_size                      = ascending #............................ asc|desc|off
	order-by_size_step_multiplier       = 2 #.................................... Looks first at 0-1B groups, then 1-2B, 2-4B, 4-8B ... 1-2KiB 128-256MiB ... 32-64GiB, etc.
	order-by_sizegroup_order_override  = 1,    min=100B,  max=10MiB #........... Anything size not specified by these, including smaller, bigger, or any in the middle, will be lumped together in specified size order after these (in this case, everything under 1mb, then between 1gb and 20gb)
	order-by_sizegroup_order_override  = 2,               max=100MB #........... No min=also everything smaller than max (might want to scoop up tiny files later like this, as they probably aren't user data)
	order-by_sizegroup_order_override  = 3,    min=100MB #...................... Everything bigger, or not otherwise included, done last
	order-by_namegroup_regex=order     = fromtop,    1,    "$FileTypes_Doc" #... fromtop will be done first
	order-by_namegroup_regex=order     = fromtop,    1.5,  "$FileTypes_Code"
	order-by_namegroup_regex=order     = fromtop,    1.75, "$FileTypes_img_camera"
	order-by_namegroup_regex=order     = fromtop,    2,    "$FileTypes_img_edit"
	order-by_namegroup_regex=order     = fromtop,    2,    "$FileTypes_img"
	order-by_namegroup_regex=order     = frombottom, 6,    "üåü‚ïëlossless‚ïëüåü" #..... frombottom will be done last
	order-by_namegroup_regex=order     = frombottom, 5,    "üåü‚ïëintermediate‚ïëüåü"
	order-by_namegroup_regex=order     = frombottom, 4,    "üåü‚ïë(vm|virtualbox|vmware|virtualization‚ïëüåü"
	order-by_namegroup_regex=order     = frombottom, 3.5,  "üåü‚ïë(collection|movies)‚ïëüåü"
	order-by_namegroup_regex=order     = frombottom, 2,    "$DEFERBACKUP"
	order-by_namegroup_regex=order     = frombottom, 1,    "$DONTBACKUP"
	order-by_date                      = descending #........................... Newest first
	order-by_date_step_multiplier       = 10 #................................... Looks at first 0-10 seconds old, then 10-100s, then 1.7-16.7m, 16.7m-2.8h, 2.8h-1.2d, 1.2d-1.7w, 1.7w-7.1m, 7.1m-5.9y, 5.9y-60y, etc.
	order-by_rule-order                = "sizegroup, sizestep, namegroup, dategroup"

	## First top-level include
	consider="/"
		## Everything under this will actually be physically scanned for folder and filenames.
		## Nothing is actually included.
		## For backups, usually a good idea to start with "/", for any OS or filesystem.
		## "/" must still be explicitly included, if desired.
		## Windows drives must still be individually or regex included, if desired.
		excl="/boot"  ## Good idea to exclude everything that will later have own its own "consider", unless using different rules later and want to include these.
		incl="$VFSROOT/etc"
			excl="regex to exclude stuff only from previous include"
				incl="regex to override previous exclusion"
		incl="$VALLUSERSHOME"
			excl=""

	consider="/boot"  ## Might be redundant with consider="/", if not excluded under that rule.
		## Won't actually be physically scanned again, since consider="/" is an ancestor.
		##     - Unless it's a symlink and symlinks were excluded in an ancestor scan, then it will be scanned.
		incl="$ANYTHING"
			symlinks=follow
			excl="relative regex to parent incl"
	```
